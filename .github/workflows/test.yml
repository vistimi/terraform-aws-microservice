name: Test

on:
    # workflow_run:
    #     workflows: ["Docker registry"]
    #     types:
    #     - completed
    # push:
    #   branches: [trunk]
    workflow_dispatch:

env:
  ECR_PRIVACY: ${{ vars.CONTAINER_REGISTRY_PRIVACY }}
  IMAGE_TAG: latest
  ORGANIZATION_NAME: ${{ github.repository_owner }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  ECR_REPOSITORY_EXTENSION: ''

jobs:
  setup:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY_PRIVATE_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION_NAME }}.amazonaws.com
      ECR_REGISTRY_PUBLIC_URI: public.ecr.aws
    outputs:
      ECR_REPOSITORY_NAME: ${{ steps.get-output.outputs.ECR_REPOSITORY_NAME }}
      ECR_LOGIN_PASSWORD: ${{ steps.get-output.outputs.ECR_LOGIN_PASSWORD }}
      ECR_REGISTRY_URI: ${{ steps.get-output.outputs.ECR_REGISTRY_URI }}
      IMAGE_TAG: ${{ steps.get-output.outputs.IMAGE_TAG }}
      ECR_REPOSITORY_EXTENSION: ${{ steps.get-output.outputs.ECR_REPOSITORY_EXTENSION }}
      DIR_NAME: ${{ steps.get-test.outputs.DIR_NAME }}
      TEST_NAMES: ${{ steps.get-test.outputs.TEST_NAMES }}    
    environment: test

    steps:
      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ vars.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region ${{ vars.AWS_REGION_NAME }}

      - name: Get ECR information
        id: get-output
        run: |
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY_EXTENSION=$ECR_REPOSITORY_EXTENSION" >> $GITHUB_OUTPUT

          REPOSITORY_NAME=$(basename ${{ github.repository }})

          ECR_REPOSITORY_NAME=$(echo $REPOSITORY_NAME-$BRANCH_NAME | tr A-Z a-z)
          echo "ECR_REPOSITORY_NAME=$ECR_REPOSITORY_NAME" >> $GITHUB_OUTPUT

          if [[ $ECR_PRIVACY == private ]]; then
            echo "ECR_LOGIN_PASSWORD=$(aws ecr get-login-password --region ${{ vars.AWS_REGION_NAME }})" >> $GITHUB_OUTPUT
            ECR_REGISTRY_URI=$ECR_REGISTRY_PRIVATE_URI
          elif [[ $ECR_PRIVACY == public ]]; then
            echo "ECR_LOGIN_PASSWORD=$(aws ecr-public get-login-password --region us-east-1)" >> $GITHUB_OUTPUT
            ECR_REGISTRY_URI=$ECR_REGISTRY_PUBLIC_URI            
          fi

          echo "ECR_REGISTRY_URI=$ECR_REGISTRY_URI" >> $GITHUB_OUTPUT
          echo using docker image::: $ECR_REGISTRY_URI/$ECR_REPOSITORY_NAME$ECR_REPOSITORY_EXTENSION:$IMAGE_TAG

  test:
    needs: [setup]
    runs-on: ubuntu-latest
    container: 
      image: ${{ needs.setup.outputs.ECR_REGISTRY_URI }}/${{ needs.setup.outputs.ECR_REPOSITORY_NAME}}${{ needs.setup.outputs.ECR_REPOSITORY_EXTENSION }}:${{ needs.setup.outputs.IMAGE_TAG }}
      credentials:
        username: AWS
        password: ${{ needs.setup.outputs.ECR_LOGIN_PASSWORD }}
    strategy:
      matrix:
        dir_name: ["rest"] # ["grpc", "cuda", "fpga", ...]
    environment: test

    env:      
      AWS_REGION_NAME: ${{ vars.AWS_REGION_NAME }}
      AWS_PROFILE_NAME: ${{ vars.AWS_PROFILE_NAME }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY: ${{ vars.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      GITHUB_OWNER: ${{ github.repository_owner }}
      GITHUB_TOKEN: ${{ secrets.GH_TERRA_TOKEN }}
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
      DOMAIN_SUFFIX: ${{ vars.DOMAIN_SUFFIX }}
      VPC_ID: ${{ vars.VPC_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Versions
        run: |
          terraform --version
      - name: Setup AWS CLI
        run: |
          make -f test/Makefile aws-auth
      - name: Setup Test
        run: |
          make -f test/Makefile prepare
      - name: Run Test
        run: |
          cd test
          go mod download
          DIR_NAME=./microservice/${{ matrix.dir_name }}
          exitCode=0
          files=$(find $DIR_NAME -type f -name "*_test.go")
          for file in $files; do
            tests=$(grep -h -Eo 'func\s+Test[A-Za-z_0-9]+\(' $file | sed -E 's/func\s+([A-Za-z_0-9]+)\(.*$/\1/')
            for test in $tests; do

              echo Running $test  
              exitCodeTest=$(go test -timeout 60m -p 1 -v -run $test $DIR_NAME > test_results.txt; echo $?)

              if [ $exitCodeTest -eq 0  ]; then
                echo -e '::group::\033[42mSUCCESSFUL\033[0m Click to view test logs'
              else
                exitCode=$exitCodeTest
                echo -e '::group::\033[42mFAILURE\033[0m Click to view test logs'
              fi
              cat test_results.txt
              echo "::endgroup::"
              
              if [ $exitCodeTest -ne 0  ]; then
                # extra cleanup in case the test goes over the timeout
                export SKIP_deploy=true
                export SKIP_validate=true

                exitCodeCleanup=$(go test -timeout 60m -p 1 -v -run $test $DIR_NAME > test_cleanup_results.txt; echo $?)

                if [ $exitCodeCleanup -eq 0 ]; then                
                  echo -e '::group::\033[42mSUCCESSFUL\033[0m Click to view cleanup logs'
                else
                  exitCode=$exitCodeCleanup
                  echo -e '::group::\033[42mFAILURE\033[0m Click to view cleanup logs'
                fi
                cat test_cleanup_results.txt
                echo "::endgroup::"
              fi 

            done
          done
          exit $exitCode