name: Test

on:
    workflow_run:
        workflows: ["Docker registry"]
        types:
        - completed
    push:
      branches: [trunk]

env:
  ECR_PRIVACY: ${{ vars.CONTAINER_REGISTRY_PRIVACY }}
  IMAGE_TAG: latest
  ORGANIZATION_NAME: ${{ github.repository_owner }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  ECR_REPOSITORY_EXTENSION: ''

jobs:
  setup:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY_PRIVATE_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION_NAME }}.amazonaws.com
      ECR_REGISTRY_PUBLIC_URI: public.ecr.aws
    outputs:
      ECR_REPOSITORY_NAME: ${{ steps.get-output.outputs.ECR_REPOSITORY_NAME }}
      ECR_LOGIN_PASSWORD: ${{ steps.get-output.outputs.ECR_LOGIN_PASSWORD }}
      ECR_REGISTRY_URI: ${{ steps.get-output.outputs.ECR_REGISTRY_URI }}
      IMAGE_TAG: ${{ steps.get-output.outputs.IMAGE_TAG }}
      ECR_REPOSITORY_EXTENSION: ${{ steps.get-output.outputs.ECR_REPOSITORY_EXTENSION }}
    strategy:
      matrix:
        environment: ['test']
    environment: ${{ matrix.environment }}

    steps:
      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ vars.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region ${{ vars.AWS_REGION_NAME }}

      - name: Get ECR information
        id: get-output
        run: |
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY_EXTENSION=$ECR_REPOSITORY_EXTENSION" >> $GITHUB_OUTPUT

          REPOSITORY_NAME=$(basename ${{ github.repository }})

          ECR_REPOSITORY_NAME=$(echo $REPOSITORY_NAME-$BRANCH_NAME | tr A-Z a-z)
          echo "ECR_REPOSITORY_NAME=$ECR_REPOSITORY_NAME" >> $GITHUB_OUTPUT

          if [[ $ECR_PRIVACY == private ]]; then
            echo "ECR_LOGIN_PASSWORD=$(aws ecr get-login-password --region ${{ vars.AWS_REGION_NAME }})" >> $GITHUB_OUTPUT
            echo "ECR_REGISTRY_URI=$ECR_REGISTRY_PRIVATE_URI" >> $GITHUB_OUTPUT            
          elif [[ $ECR_PRIVACY == public ]]; then
            echo "ECR_LOGIN_PASSWORD=$(aws ecr-public get-login-password --region us-east-1)" >> $GITHUB_OUTPUT
            echo "ECR_REGISTRY_URI=$ECR_REGISTRY_PUBLIC_URI" >> $GITHUB_OUTPUT  
          fi

  test:
    needs: [setup]
    runs-on: ubuntu-latest
    container: 
      image: ${{ needs.setup.outputs.ECR_REGISTRY_URI }}/${{ needs.setup.outputs.ECR_REPOSITORY_NAME}}${{ needs.setup.outputs.ECR_REPOSITORY_EXTENSION }}:${{ needs.setup.outputs.IMAGE_TAG }}
      credentials:
        username: AWS
        password: ${{ needs.setup.outputs.ECR_LOGIN_PASSWORD }}
    strategy:
      matrix:
        # dir_name: ["cuda", "fpga", ...]
        dir_name: ["rest", "grpc"]
        environment: ['test']
    environment: ${{ matrix.environment }}

    env:      
      AWS_REGION_NAME: ${{ vars.AWS_REGION_NAME }}
      AWS_PROFILE_NAME: ${{ vars.AWS_PROFILE_NAME }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY: ${{ vars.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      GITHUB_OWNER: ${{ github.repository_owner }}
      GITHUB_TOKEN: ${{ secrets.GH_TERRA_TOKEN }}
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
      DOMAIN_SUFFIX: ${{ vars.DOMAIN_SUFFIX }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Versions
        run: |
          terraform --version
          terragrunt --version
      - name: Setup AWS CLI
        id: setup
        run: |
          make -f Makefile aws-auth
      - name: Setup Test
        run: |
          make -f Makefile prepare

          ABS_TEST_DIR_NAME=./test/microservice/${{ matrix.dir_name }}

          # test and clean
          go test -timeout 60m -p 1 -v -cover $ABS_TEST_DIR_NAME

          # double cleaning check
          export SKIP_deploy=true
          export SKIP_validate=true
          go test -timeout 60m -p 1 -v -cover $ABS_TEST_DIR_NAME